package gui.blink;

import global.DigitToHandle;
import global.ExceptionFormatter;

class SecondBlink
extends Blink
{
	
	private Thread thread;
	
	/**
	 * <code>enter</code> wird aufgerufen, wenn der Zustand geändert werden soll.
	 * Diese Methode ist Teil des State-Pattern, d.h. hier werden Aktionen ausgeführt,
	 * wenn dieser Zustand betreten wird.
	 * 
	 * In dieser Klasse <code>BlinkSecond</code> stoppt <code>enter</code> den Thread,
	 * welcher die Minuten blinken läßt. Womöglich sind die Minuten nicht sichtbar,
	 * weil der Thread zu einem ungünstigen Zeitpunkt gestoppt wurde. Daher wird das
	 * Label wieder als sichtbar markiert. Anschließend wird der Thread gestartet,
	 * welcher die Sekunden blinken läßt.
	 *
	 */
	void enter()
	{
		logger.info("Blink-Zustand 'BlinkSecond' betreten");
		logger.info("Neuer Thread für Sekunden-Blinken erzeugen und starten");
		
		this.thread = new Thread(this);
		this.thread.start();
	}
	
	
	void exit()
	{
		logger.info("Thread stoppen");
		
		this.thread.stop();
		lsecond.setVisible(true);
	}
	
	
	/**
	 * <code>processEvent</code> ändert den Zustand. Je nach Event-Ereignis wird
	 * der entsprechende Zustand betreten. 
	 * 
	 * Der nächste Zustand ist "Nichts blinkt".
	 */
	public Blink processEvent(DigitToHandle event)
	{		
		switch(event)
		{
			case NONE:
					this.exit();
					blinkNone.enter();
					return (Blink) blinkNone;
					
			default: 
				
				logger.severe("Illegalen Zustand betreten");
				String msg = "Unbekannter Event" + event;
				throw new IllegalArgumentException(msg);
		}
	}
	
	
	/**
	 * Diese von Thread vererbte Methode läßt das Sekunden-Digit blinken.
	 */
	public void run()
	{
		while(true)
		{
			try
			{
				Thread.sleep(this.intervall);
				Blink.lsecond.setVisible(false);
				Thread.sleep(this.intervall);
				Blink.lsecond.setVisible(true);				
			}
			catch(InterruptedException e)
			{
				logger.warning(ExceptionFormatter.format(e));
			}
		}
	}
}